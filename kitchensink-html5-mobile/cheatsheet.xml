<?xml version="1.0" encoding="UTF-8"?> 
<!--
    JBoss, Home of Professional Open Source
    Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<cheatsheet title="HTML5 + Mobile + JAX-RS: Kitchensink quickstart">
  <intro>
    <description>
      This quickstart shows off HTML5 based desktop/mobile web application development with Java EE 6 on JBoss Enterprise Application Platform 6.1 or later. This project uses HTML5, jQuery Mobile, JAX-RS, CDI 1.0, EJB 3.1, JPA 2.0 and Bean Validation 1.0. It includes a persistence unit and some sample persistence and transaction code to help you get your feet wet with database access in enterprise Java.
      <br/><br/>
      <b>HTML5</b>
      <br/><br/>
      HTML5 refers to both the newest version of HTML language, and the set of associated technologies that allow creation of web applications and sites that target various devices.
      <br/><br/>
      <b>jQuery Mobile</b>
      <br/><br/>
      jQuery Mobile is a client-side web framework with touch-friendly widgets. It provides a HTML5-based user-interface that uses semantic markup. Sites built with jQuery Mobile are accessible on all popular smartphone, tablet and desktop devices.  
      <br/><br/>
      <b>JAX-RS: The Java API for RESTful Web Services</b>
      <br/><br/>
      JAX-RS is a new specification in Java EE 6. It allows application developers to easily expose Java services as RESTful web services.
      <br/><br/>
      <b>EJB 3.1</b>
      <br/><br/>
      EJB 3.1 is an update to the EJB specification for Java EE 6. It allows application developers to build business components and services.
      <br/><br/>
      <b>JPA 2.0</b>
      <br/><br/>
      JPA 2.0 is an update to the JPA specification for Java EE 6. It provides application developers with an object-relational mapping facility to manage relational data. 
      <br/><br/>
      <b>Bean Validation</b>
      <br/><br/>
      Bean Validation is a new specification in Java EE 6, inspired by Hibernate Validator. It allows application developers to specify constraints once (often in their domain model), and have them applied in all layers of the application, protecting data and giving useful feedback to users.
      <br/><br/>
    </description>
  </intro>
  <item
    skip="false"
    title="The kitchensink-html5-mobile example in depth">
    <description>
      The kitchensink-html5-mobile application shows off a number of Java EE technologies such as HTML5, jQuery Mobile, JAX-RS, CDI 1.0, EJB 3.1, JPA 2.0 and Bean Validation 1.0. 
      It does this by providing a member registration database, available via HTML5 and JAX-RS.
      <br/><br/>
      As usual, let&apos;s start by looking at the necessary deployment descriptors. By now, we&apos;re very used to seeing <b>beans.xml</b> in <b>WEB-INF/</b> (which can be found in the <b>src/main/webapp</b> directory of the example). Notice that, once again, we don&apos;t need a web.xml. There are two configuration files (which can be found in the <b>src/main/resources</b> directory of the example) â€” <b>WEB-INF/classes/META-INF/persistence.xml</b>, which sets up JPA, and <b>WEB-INF/classes/import.sql</b> which Hibernate, the JPA provider in JBoss Enterprise Application Platform, will use to load the initial users into the application when the application starts. We discussed both of these files in detail in The <b>greeter example in depth</b>, and these are largely the same.
    </description> 
    <command
    required="true"
    returns="currentProject"
    serialization="org.jboss.tools.project.examples.cheatsheet.getProjectForCheatsheet"/>
  </item>
  
  <item
    skip="true"
    title="jQuery Mobile pages in index.html">
    <description>
    Next, let&apos;s take a look the <b>index.html</b> file the user sees. The HTML page consists of several jQuery Mobile pages.
    </description>
    <subitem
          label="jQuery Mobile and other required JavaScript and CSS artifacts are added to the page in the head element."
          skip="true">
       <command
             required="false"
             serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=24,toLine=47,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="When you perform the previous action, the page is now open in the Visual Page Editor. The Visual Page Editor provides a live-editing experience - it allows you to make changes to the source of the HTML page and view the results in an embedded browser, all within Eclipse."
          skip="true">
    </subitem>
    <subitem
          label="You can add jQuery Mobile components to the page via the Palette. If it is not already visible, performing the current action will open it. When the Visual Page Editor is open, the palette will offer jQuery Mobile components that can be added to the page."
          skip="true">
       <command
             required="false"
             serialization="org.eclipse.ui.views.showView(org.eclipse.ui.views.showView.viewId=org.eclipse.gef.ui.palette_view)"/>
    </subitem>
    <subitem
          label="The first jQuery Mobile page is the introduction page."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=144,toLine=193,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="A jQuery Mobile page can be added to HTML page by clicking the page component in the palette. This adds a new jQuery Mobile page at the current cursor location in the editor. You can also drag and drop the page component from the palette to the HTML page."
          skip="true">
    </subitem>
    <subitem
          label="We have a header that displays a button to view information about the application. Clicking the button opens a jQuery Mobile page as a dialog, displaying information about the application."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=146,toLine=149,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="Note that headers can be added to pages by clicking the Header Bar component in the palette."
          skip="true">
    </subitem>
    <subitem
          label="The content section contains text introducing the application features."
          skip="true">
      <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=152,toLine=178,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="And we have a footer containing a button to navigate to the Home page (the current page), and the Add member and List member pages."
          skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=182,toLine=191,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="Note that footers can be added to pages by clicking the Footer Bar component in the palette."
          skip="true">
    </subitem>
    <subitem
          label="The next jQuery Mobile page is the one to create a new member. The header and footer is similar to the one in the introduction page."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=196,toLine=243,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The content section allows us to register new members via a registration form (with id &quot;reg&quot;). There should be one member already created when the application started. The form in the content section allows input of the name, email and telephone number of a member."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=204,toLine=229,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="Forms can be added to pages by clicking the Form component in the jQuery Mobile palette. The rest of the form can be constructed with the palette via other form components available in the palette."
          skip="true">
    </subitem>
    <subitem
          label="The name is input via a HTML form text field. Such a field can be added with the text input component."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=210,toLine=213,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The email is input through a HTML5 form input field of type email. Browsers supporting this form of input will perform validation of the email keyed in by the user. Like the name field, the email field can also be added through the jQuery Mobile palatter via the text input component. The displayed dialog will allow you to specify that the type should be an email field, among other parameters."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=214,toLine=217,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The telephone number is input through a HTML form field of type telephone number with a pattern allowing numbers of length 10 through 12. Browsers supporting the telephone number as input may display an reduced keyboard with allowed characters (mobile browsers typically display such a keyboard). Browsers supporting telephone number input will also perform validation of the number keyed in by the user. And like the email field, the palette can be used to construct this field."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=218,toLine=221,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The next jQuery Mobile page is the one to display members. The header and footer is similar to the one in the introduction page."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=246,toLine=278,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The content section allows us to refresh the list of members displayed. The members are displayed in a placeholder div element with id: &quot;members&quot;."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=255,toLine=264,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="The final jQuery Mobile page is the one to display information about the application. It was introduced earlier as the dialog displayed on clicking the button in the header section on all pages."
          skip="true">
          <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=281,toLine=303,,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
  </item>
  
  <item
    skip="true"
    title="Presentation logic in index.html">
    <description>
    Next, let&apos;s take a look at the wiring done in JavaScript, defined in the <b>index.html</b> file. 
    </description>
    <subitem
          label="We detect if a mobile or tablet device is used to load the page via a simple check..."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=52,toLine=53,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="When a mobile or tablet is used, we load jQuery Mobile"
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=56,toLine=66,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="Otherwise, we don't load jQuery Mobile and instead attach a desktop-specific stylesheet. When the browser finishes loading the index.html page, the information article element (with id &quot;aside&quot;) is modified to become a child element of the main section element."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=71,toLine=78,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="In all environments (mobile or not), when the browser finishes loading the index.html page, it unhides the &apos;container&apos; element and fetches the list of members to display from the server. Event handlers are also attached to handle the events when the submit button in the registration page is clicked, when the cancel button in the registration page is clicked, and when the refresh button in the member list page is clicked."
          skip="true">
      <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=80,toLine=115,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
    <subitem
          label="We also define a utility method to convert the registration form values into a JavaScript object that can be easily passed to the server as a JSON object."
          skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/index.html,fromLine=117,toLine=131,editorID=org.jboss.tools.jst.jsp.jspeditor.HTMLTextEditor)"/>
    </subitem>
  </item>
  
  <item
    skip="true"
    title="app.js">
    <description>
    We now take a look at the core JavaScript functionality for the application referenced from JavaScript methods that were earlier defined in the index.html file.
    This is defined in the app.js file present in the <b>src/main/webapp/js/app.js</b> file of the project.
    The core functionality invokes the REST API on the server to register new members. It also updates the member list when the refresh button is clicked.  
    </description>
    <subitem
          label="In the &quot;buildMemberRows&quot; function, we apply the Underscore.js template present in the element with id &quot;member-tmpl&quot; using the array of members as an argument to the template."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/js/app.js,fromLine=23,toLine=25)"/>
    </subitem>
    <subitem
          label="In the &quot;updateMemberTable&quot; function, we invoke the REST API located at &quot;/rest/members&quot; to obtain the collection of members. Once the collection is available in the response, we update the contents of the &quot;members&quot; element with the output of the &quot;buildMemberRows&quot; function."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/js/app.js,fromLine=28,toLine=39)"/>
    </subitem>
    <subitem
          label="The &quot;registerMember&quot; function invokes the the REST API located at &quot;/rest/members&quot; with the JSON representation of the values in the registration form. Any existing error messages are removed."
          skip="true">
      <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/js/app.js,fromLine=46,toLine=83)"/>
    </subitem>
    <subitem
          label="On successful registration, the form values are cleared, a message indicating successful registration is displayed and the list of members is updated."
          skip="true">
      <command
        required="false"
        serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/js/app.js,fromLine=57,toLine=67)"/>
    </subitem>
    <subitem
          label="On a failure to register, if the HTTP response code is 400 or 409, the response is parsed and any error messages are displayed adjacent the form input fields."
          skip="true">
        <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/webapp/js/app.js,fromLine=68,toLine=81)"/>
    </subitem>
  </item>
  
  <item
        skip="true"
        title="Member.java">
     <description>
       Next, let&apos;s take a look at the Member entity, before we look at how the application is wired together:
    </description>
    <subitem
            label="As usual with JPA, we define that the class is an entity by adding @Entity"
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/model/Member.java,fromLine=36)"/>
  </subitem>
  <subitem
            label="Members are exposed as a RESTful service using JAX-RS. We can use JAXB to map the object to XML and to do this we need to add @XmlRootElement."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/model/Member.java,fromLine=37)"/>
  </subitem>
  <subitem
            label="Bean Validation allows constraints to be defined once (on the entity) and applied everywhere. Here we constrain the person's name to a certain size and regular expression. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/model/Member.java,fromLine=47,toLine=49)"/>
  </subitem>
  <subitem
            label="Hibernate Validator also offers some extra validations such as @Email. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/model/Member.java,fromLine=54,toLine=54)"/>
  </subitem>
  <subitem
            label="@Digits, @NotNull and @Size are further examples of constraints. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/model/Member.java,fromLine=57,toLine=59)"/>
  </subitem>
  
  </item>

  <item
        skip="true"
        title="MemberRepository.java">
     <description>
       Let&apos;s take a look at MemberRepository, which is responsible for interactions with the persistence layer:
    </description>
    <subitem
            label="The bean is application scoped, as it is a singleton."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/data/MemberRepository.java,fromLine=29)"/>
  </subitem>
  <subitem
            label="The entity manager is injected, to allow interaction with JPA."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/data/MemberRepository.java,fromLine=32)"/>
  </subitem>
  <subitem
            label="The JPA criteria api is used to load a member by his or her unique identifier, email address."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/data/MemberRepository.java,fromLine=40,toLine=47)"/>
  </subitem>
  <subitem
            label="The criteria api can also be used to load lists of entities ."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/data/MemberRepository.java,fromLine=51,toLine=58)"/>
  </subitem>
    
  </item>
  
  <item
        skip="true"
        title="MemberRegistration.java">
     <description>
       Let&apos;s now look at MemberRegistration, the class that allows us to create new members from the JSF page
    </description>
    <subitem
            label="This bean requires transactions as it needs to write to the database. Making this an EJB gives us access to declarative transactions - much simpler than manual transaction control! "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/service/MemberRegistration.java,fromLine=28)"/>
  </subitem>
  <subitem
            label="Here we inject a JDK logger, defined in the Resources class."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/service/MemberRegistration.java,fromLine=31)"/>
  </subitem>
  <subitem
            label="An event is sent every time a member is updated. This allows other pieces of code (in this quickstart the member list is refreshed) to react to changes in the member list without any coupling to this class. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/service/MemberRegistration.java,fromLine=43)"/>
  </subitem>  
    
  </item>
  
  <item
        skip="true"
        title="Resources.java">
     <description>
       Now, let's take a look at the Resources class, which provides resources such as the entity manager. CDI recommends using "resource producers", as we do in this example, to alias resources to CDI beans, allowing for a consistent style throughout our application:
    </description>
    <subitem
            label="We use the 'resource producer' pattern, from CDI, to 'alias' the old fashioned @PersistenceContext injection of the entity manager to a CDI style injection. This allows us to use a consistent injection style (@Inject) throughout the application. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/util/Resources.java,fromLine=42)"/>
  </subitem>
  <subitem
            label="We expose a JDK logger for injection. In order to save a bit more boiler plate, we automatically set the logger category as the class name! "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/main/java/org/jboss/as/quickstarts/html5_mobile/util/Resources.java,fromLine=46)"/>
  </subitem>
  <subitem
            label="If you want to define your own datasource, take a look at the Administration and Configuration Guide for JBoss Enterprise Application Platform 6"
            skip="true">
    <command
           required="false"
           serialization="org.eclipse.ui.browser.openBrowser(url=https://access.redhat.com/site/documentation/JBoss_Enterprise_Application_Platform/)"/>
  </subitem>
  </item>
  
  <item
        skip="true"
        title="Run and deploy the application">
     <description>
       Right-click the project and select <b>Run As</b> &gt; <b>Run On Server</b> or click on the &quot;Click to Perform&quot; link below.
    </description>
    <!-- the runOnServer command is not implemented yet
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.actions.runOnServer(project=${currentProject})"/>
  -->
  <action
    pluginId="org.jboss.tools.project.examples.cheatsheet"
    class="org.jboss.tools.project.examples.cheatsheet.actions.RunOnServer"
    param1="${currentProject}"/> 
  </item>
  <item
        skip="true"
        title="Open the application in BrowserSim">
     <description>
       Locate the &quot;Run BrowserSim&quot; button on the toolbar and click it, or click on the &quot;Click to Perform&quot; link below.
       This launches BrowserSim where you can simulate the execution of the application on a mobile browser.
       Once you launch BrowserSim, navigate to the deployed application via the BrowserSim address bar. The application is usually accessible at this following link: <b>http://localhost:8080/jboss-kitchensink-html5-mobile/</b> 
    </description>
     <command
           required="false"
           serialization="org.jboss.tools.vpe.browsersim.eclipse.commands.runBrowserSim"/>
  </item>
  <item
        skip="true"
        title="Arquillian">
     <description>
       If you&apos;ve been following along with the Test Driven Development craze of the past few years, 
       you&apos;re probably getting a bit nervous by now, wondering how on earth you are going to test your application. 
       Lucky for you, the Arquillian project is here to help!
    <br/><br/>
    Arquillian provides all the boiler plate for running your test inside JBoss Enterprise Application Platform 6 or JBoss AS 7, 
    allowing you to concentrate on testing your application. 
    In order to do that, it utilizes Shrinkwrap, a fluent API for defining packaging, 
    to create an archive to deploy. 
    We'll go through the testcase, and how you configure Arquillian in just a moment, 
    but first let's run the test.
    
    </description>
  </item>
  <item
        skip="true"
        title="Start Arquillian tests">
    <description>
      Arquillian defines two modes, managed and remote. 
      The managed mode will take care of starting and stopping the server for you, 
      while the remote mode connects to an already running server.
      <br/><br/>
      The following action starts the test in the <b>remote</b> mode because you have started the server in the previous step. 
    <br/>
        Right-click the project, select <b>Properties&gt;Maven</b> and 
        enter <b>arq-jbossas-remote</b> to the <b>Active Maven Profile</b> field. 
        After that, right-click the project and select <b>Run As&gt;JUnit test</b>.
    </description>
    <!-- the launchJUnitTest command is not implemented yey
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.actions.launchJUnitTest(project=${currentProject}, activateProfile=arq-jbossas-remote)"/>
  -->
  
  <action
      pluginId="org.jboss.tools.project.examples.cheatsheet"
      class="org.jboss.tools.project.examples.cheatsheet.actions.LaunchJUnitTest"
      param1="${currentProject}" 
        param2="arq-jbossas-remote"/> 
  </item>
  
  <item
        skip="true"
        title="MemberRegistrationTest.java">
    <description>
      So far so good, the test is running. But what does the test look like?
    </description>
    <subitem
            label="@RunWith(Arquillian.class) tells JUnit to hand control over to Arquillian when executing tests."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=49)"/>
  </subitem>
  <subitem
            label="The @Deployment annotation identifies the createTestArchive static method to Arquillian as the one to use to determine which resources and classes to deploy "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=51)"/>
  </subitem>
  <subitem
            label="We add just the classes needed for the test, no more "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=55,toLine=56)"/>
  </subitem>
  <subitem
            label="We also add persistence.xml as our test is going to use the database "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=57)"/>
  </subitem>
  <subitem
            label="Of course, we must add beans.xml to enable CDI."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=58)"/>
  </subitem>
  <subitem
            label="Finally, we add a test datasource, so that test data doesn&apos;t overwrite production data."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=59)"/>
  </subitem>
  <subitem
            label="Arquillian allows us to inject beans into the test case."
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=62,toLine=63)"/>
  </subitem>
  <subitem
            label="The test method works as you would expect - creates a new member, registers them, and then verifies that the member was created "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/java/org/jboss/as/quickstarts/html5_mobile/test/MemberRegistrationTest.java,fromLine=68,toLine=76)"/>
  </subitem>
  
  </item>
  
  <item
        skip="true"
        title="arquillian.xml">
    <description>
      As you can see, Arquillian has lived up to the promise - the test case is focused on what to test 
      (the @Deployment method) and how to test (the @Test method). 
      It&apos;s also worth noting that this isn&apos;t a simplistic unit test - this is a fully fledged integration
       test that uses the database.
    <br/><br/>
    Now, let&apos;s look at how we configure Arquillian. 
    First of all, let&apos;s take a look at <b>arquillian.xml</b> in <b>src/test/resources</b>.
    </description>
    <subitem
            label="Arquillian deploys the test war to JBoss AS, and doesn't write it to disk. For debugging, it can be very useful to see exactly what is in your war, so Arquillian allows you to export the war when the tests runs "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/src/test/resources/arquillian.xml)"/>
  </subitem>
  </item>
  
    <item
        skip="true"
        title="pom.xml">
    <description>
      Now, we need to look at how we select between containers in the pom.xml:
    </description>
    <subitem
            label="The profile needs an id so we can activate from Eclipse or the command line "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/pom.xml,fromLine=317,toLine=342)"/>
  </subitem>
  <subitem
            label="Arquillian decides which container to use depending on your classpath. Here we define the remote JBoss AS container. "
            skip="true">
    <command
      required="false"
      serialization="org.jboss.tools.project.examples.cheatsheet.openFileInEditor(path=/${currentProject}/pom.xml,fromLine=331,toLine=342)"/>
  </subitem>
  
  </item>
  <item
        skip="true"
        title="Arquillian project page">
     <description>
      And that&apos;s it! As you can see Arquillian delivers simple and true testing. 
      You can concentrate on writing your test functionality, and run your tests in the same environment in which you will run your application.
      <br/><br/>
      Arquillian also offers other containers, allowing you to run your tests against Weld Embedded (super fast, but your enterprise services are mocked), GlassFish, and more.
      <br/><br/>
      More info on Arquillian you can find on the Arquillian project page.
    </description>
    <command
           required="false"
           serialization="org.eclipse.ui.browser.openBrowser(url=http://www.jboss.org/arquillian)"/>
  </item>
  
  <item
    skip="true"
    title="Create your own application ">
    <description>
      What we didn&apos;t tell you about the <b>kitchensink-html5-mobile quickstart</b> is that it is generated from a Maven archetype. 
      Using this archetype offers you the perfect opportunity to generate your own project.
      <br/><br/>
      In order to perform that, you should select <b>Help&gt;JBoss Central</b> and click the <b>HTML5 Project</b> wizard.
      <br/>
      You will get a brand new project with the same functionality as <b>kitchensink-html5-mobile</b>, 
      but customized with your details.
    </description>
  </item>
  
</cheatsheet>
